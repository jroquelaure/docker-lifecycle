node() {
    stage 'Setup Build Environment'
        deleteDir()
        sh "docker images -qa | xargs docker rmi -f || true" 
        git url: 'https://github.com/jroquelaure/docker-lifecycle.git', branch: 'master'
        def server = Artifactory.server(params.artifactoryInstance)

        def username = params.artifactoryUserName
        def password = params.apiKey
        def authUrl = "$server.url/api/npm/auth"
        def bowerUrl = "$server.url/api/bower/bower-dev"
        def npmUrl = "$server.url/api/npm/npm-prod"
        sh """sed -ie 's/ubuntu:5001/$params.dockerRepo/g' docker-framework/DockerFile"""
        sh """sed -ie 's/ubuntu:5001/$params.dockerRepo/g' docker-framework/framework-test/Dockerfile"""
        
    stage 'Build base image'
        
        def downloadSpec = """{
            "files": [
            {
                "pattern": "generic-local/java/*jdk*.tar.gz",
                "target": "docker-framework/jdk/jdk-8-linux-x64.tar.gz",
                "flat": "true"
            }
        ]
        }"""
        def buildInfo = server.download(downloadSpec)
         
        def artDocker= Artifactory.docker("$params.artifactoryUserName", "$params.apiKey")
             
        docker.build(params.dockerRepo + "/docker-framework:$buildInfo.number", "-f docker-framework/DockerFile ./docker-framework/") 

    stage "Push built image"
        
        def dockerInfo = artDocker.push("$params.dockerRepo/docker-framework:$buildInfo.number", 'docker-dev-local')
        buildInfo.append(dockerInfo)
        // buildInfo.env.capture = true
        // buildInfo.env.collect()
        server.publishBuildInfo(buildInfo)
        
        sh("""curl -H 'X-JFrog-Art-Api:$params.apiKey' $server.url/api/docker/docker-dev-local/v2/promote -H "Content-Type:application/json" -d '{"targetRepo" : "docker-dev-local", "dockerRepository" : "docker-framework", "tag" : "$buildInfo.number", "targetTag" : "latest", "copy": true }' """)
    
    stage "Xray scan"
        if(params.xray)
        {
        def xrayConfig = [
        //Mandatory parameters
        'buildName'         : buildInfo.name,
        'buildNumber'       : buildInfo.number,

        //Optional
        'failBuild'        :true //Default
        ]

        // Scan xray build
        def xrayResults = server.xrayScan xrayConfig
        // Print full report from xray
        echo xrayResults as String
    }
    if (!params.xray || params.xray && currentBuild.result == null) {
        stage "Test image"    
            //TODO get latest released app js + jar
             def curlstr="curl -H 'X-JFrog-Art-Api:"+password+"' '$server.url"
            def jarverstr = curlstr+ "/api/search/latestVersion?g=com.jfrog&a=frogsws&repos=libs-release'"
        
            sh jarverstr +' > docker-app/jar/version.txt'
            sh 'cat docker-app/jar/version.txt'
            env.JARVER=readFile('docker-app/jar/version.txt')

            sh "curl -S -u$username:$password $authUrl > .npmrc"
        
            sh("""echo '{
                "directory": "app/bower_components",
                "registry" : "http://$username:$password@$server.url/artifactory/api/bower/bower-dev",
                "resolvers" : [ "bower-art-resolver" ]
            }' > .bowerrc""".toString())

              downloadSpec = """{
                    "files": [
                    {
                        "pattern": "libs-release/com/jfrog/frogsws/$env.JARVER/frogsws-$env.JARVER*.jar",
                        "target": "docker-framework/framework-test/jar/frogsws.jar",
                        "flat":"true"
                    }
                ]
                }"""
             server.download(downloadSpec)
             
             sh "mkdir -p docker-framework/framework-test/ui"
             sh "curl -u$username:$password \"$server.url/npm-prod/org/jfrog/frogsui/frogsui-\\[RELEASE\\].tgz\" -o docker-framework/framework-test/ui/frogsui.tgz"
           
             sh "tar -xvzf docker-framework/framework-test/ui/frogsui.tgz -C docker-framework/framework-test/ui/"
             sh "mv docker-framework/framework-test/ui/package docker-framework/framework-test/ui/frogsui"
            //build framework_test image
                          
            testApp = docker.build("framework-test:$buildInfo.number", "-f docker-framework/framework-test/Dockerfile ./docker-framework/framework-test/") 
            //run it
            testApp.withRun('-p 8099:8000 -p 9000:9000') { c ->
                sleep 10
                sh 'curl "localhost:8099/frogsui/app/index.html"'
            }
            sh "docker rmi " + params.dockerRepo + "/docker-framework:$buildInfo.number"
            sh "docker rmi " + params.dockerRepo + "/docker-framework:latest"
        stage "Promote build"
            def promotionConfig = [
            // Mandatory parameters
            'buildName'          : buildInfo.name,
            'buildNumber'        : buildInfo.number,
            'targetRepo'         : 'docker-prod-local2',

            // Optional parameters
            'comment'            : 'ready for release',
            'sourceRepo'         : 'docker-dev-local',
            'status'             : 'Released',
            'includeDependencies': false,
            'copy'               : true
        ]

        // Promote build
        server.promote promotionConfig
        
        sh("""curl -H 'X-JFrog-Art-Api:$params.apiKey' $server.url/api/docker/docker-dev-local/v2/promote -H "Content-Type:application/json" -d '{"targetRepo" : "docker-prod-local2", "dockerRepository" : "docker-framework", "tag" : "$buildInfo.number", "targetTag" : "$buildInfo.number", "copy": true }' """)
        sh("""curl -H 'X-JFrog-Art-Api:$params.apiKey' $server.url/api/docker/docker-prod-local2/v2/promote -H "Content-Type:application/json" -d '{"targetRepo" : "docker-prod-local2", "dockerRepository" : "docker-framework", "tag" : "$buildInfo.number", "targetTag" : "latest", "copy": true }' """)
    }
    else {
         stage "Reject build"
            def promotionConfig = [
            // Mandatory parameters
            'buildName'          : buildInfo.name,
            'buildNumber'        : buildInfo.number,
            'targetRepo'         : 'docker-garbage-local',

            // Optional parameters
            'comment'            : 'rejected for security reason - see XRAy report',
            'sourceRepo'         : 'docker-dev-local',
            'status'             : 'Rejected',
            'includeDependencies': false,
            'copy'               : true
        ]

        server.promote promotionConfig
    }


}